<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quebra-Cabe√ßa Personalizado</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .puzzle-piece {
            cursor: grab;
            transition: transform 0.2s;
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
        }
        .puzzle-piece:hover {
            transform: scale(1.05);
            z-index: 10;
        }
        .puzzle-piece.dragging {
            cursor: grabbing;
            transform: rotate(5deg) scale(1.1);
            z-index: 20;
        }
        .puzzle-piece.selected {
            border: 3px solid #fbbf24 !important;
            box-shadow: 0 0 15px rgba(251, 191, 36, 0.6);
            transform: scale(1.1);
            z-index: 15;
        }
        .drop-zone {
            border: 2px dashed #cbd5e0;
            transition: all 0.3s;
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
        }
        .drop-zone.drag-over {
            border-color: #4299e1;
            background-color: #ebf8ff;
        }
        .drop-zone.highlight {
            border-color: #fbbf24;
            background-color: #fef3c7;
            animation: pulse 1s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }
        .correct-position {
            border: 2px solid #48bb78 !important;
        }
        
        /* Welcome screen animations */
        .floating-piece {
            animation: floatPiece 4s ease-in-out infinite;
        }
        
        @keyframes floatPiece {
            0% { transform: translate(0, 0) rotate(0deg); }
            25% { transform: translate(30px, -20px) rotate(5deg); }
            50% { transform: translate(-20px, 10px) rotate(-3deg); }
            75% { transform: translate(40px, 5px) rotate(8deg); }
            100% { transform: translate(0, 0) rotate(0deg); }
        }
        
        .puzzle-complete {
            animation: puzzleGlow 2s ease-in-out infinite alternate;
        }
        
        @keyframes puzzleGlow {
            0% { filter: drop-shadow(0 0 10px rgba(59, 130, 246, 0.5)); }
            100% { filter: drop-shadow(0 0 20px rgba(59, 130, 246, 0.8)); }
        }
        
        .title-bounce {
            animation: titleBounce 2s ease-in-out infinite;
        }
        
        @keyframes titleBounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }
        
        .fade-in {
            animation: fadeIn 1s ease-in;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body class="bg-gradient-to-br from-purple-600 via-blue-600 to-teal-500 min-h-screen">
    
    <!-- Welcome Screen -->
    <div id="welcomeScreen" class="min-h-screen flex flex-col items-center justify-center px-4">
        <div class="text-center mb-12 fade-in">
            <h1 class="text-6xl md:text-8xl font-bold text-white mb-4 title-bounce">
                üß© Vamos Brincar de
            </h1>
            <h2 class="text-4xl md:text-6xl font-bold text-yellow-300 title-bounce" style="animation-delay: 0.5s;">
                Quebra-Cabe√ßa!
            </h2>
        </div>
        
        <!-- Animated Puzzle Demo -->
        <div class="relative mb-12 fade-in" style="animation-delay: 1s;">
            <!-- Main puzzle with missing piece -->
            <div class="puzzle-complete">
                <svg width="300" height="200" viewBox="0 0 300 200" class="drop-shadow-lg">
                    <!-- Dog body -->
                    <ellipse cx="150" cy="120" rx="80" ry="40" fill="#8B4513" stroke="#654321" stroke-width="2"/>
                    
                    <!-- Dog head -->
                    <circle cx="100" cy="80" r="35" fill="#D2691E" stroke="#654321" stroke-width="2"/>
                    
                    <!-- Dog ears -->
                    <ellipse cx="80" cy="60" rx="15" ry="25" fill="#8B4513" stroke="#654321" stroke-width="2"/>
                    <ellipse cx="120" cy="60" rx="15" ry="25" fill="#8B4513" stroke="#654321" stroke-width="2"/>
                    
                    <!-- Dog legs -->
                    <rect x="110" y="150" width="12" height="30" fill="#8B4513" stroke="#654321" stroke-width="2" rx="6"/>
                    <rect x="130" y="150" width="12" height="30" fill="#8B4513" stroke="#654321" stroke-width="2" rx="6"/>
                    <rect x="170" y="150" width="12" height="30" fill="#8B4513" stroke="#654321" stroke-width="2" rx="6"/>
                    <rect x="190" y="150" width="12" height="30" fill="#8B4513" stroke="#654321" stroke-width="2" rx="6"/>
                    
                    <!-- Dog tail -->
                    <ellipse cx="240" cy="110" rx="20" ry="8" fill="#8B4513" stroke="#654321" stroke-width="2"/>
                    
                    <!-- Missing piece area (eyes and nose) -->
                    <rect x="85" y="70" width="30" height="20" fill="none" stroke="#fff" stroke-width="3" stroke-dasharray="5,5" opacity="0.7"/>
                </svg>
            </div>
            
            <!-- Floating puzzle piece -->
            <div class="absolute top-0 left-0 floating-piece">
                <svg width="40" height="30" viewBox="0 0 40 30" class="drop-shadow-lg">
                    <!-- Puzzle piece shape with dog eyes and nose -->
                    <path d="M5,5 L35,5 L35,25 L5,25 Z" fill="#D2691E" stroke="#654321" stroke-width="2"/>
                    
                    <!-- Dog eyes -->
                    <circle cx="12" r="3" cy="12" fill="#000"/>
                    <circle cx="28" cy="12" r="3" fill="#000"/>
                    <circle cx="13" cy="11" r="1" fill="#fff"/>
                    <circle cx="29" cy="11" r="1" fill="#fff"/>
                    
                    <!-- Dog nose -->
                    <ellipse cx="20" cy="18" rx="3" ry="2" fill="#000"/>
                </svg>
            </div>
        </div>
        
        <button onclick="startGame()" class="bg-yellow-400 hover:bg-yellow-500 text-gray-800 font-bold py-4 px-8 rounded-full text-xl shadow-2xl transform hover:scale-105 transition-all duration-300 fade-in" style="animation-delay: 2s;">
            üéÆ Come√ßar a Brincadeira!
        </button>
        
        <p class="text-white text-lg mt-6 text-center max-w-md fade-in" style="animation-delay: 2.5s;">
            Fa√ßa upload da sua foto favorita e transforme em um quebra-cabe√ßa divertido!
        </p>
    </div>

    <!-- Main Game (hidden initially) -->
    <div id="mainGame" class="hidden">
        <div class="container mx-auto px-4 py-8">
            <div class="flex items-center justify-between mb-8">
                <h1 class="text-4xl font-bold text-white">üß© Quebra-Cabe√ßa Personalizado</h1>
                <button onclick="goBack()" class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg transition-colors">
                    ‚Üê Voltar
                </button>
            </div>
            
            <!-- Upload Section -->
            <div class="bg-white rounded-xl shadow-2xl p-6 mb-8 max-w-2xl mx-auto">
                <h2 class="text-2xl font-semibold text-gray-800 mb-4">Escolha sua foto</h2>
                <div class="mb-4">
                    <input type="file" id="imageUpload" accept="image/*" class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none">
                </div>
                
                <!-- Difficulty Buttons -->
                <div class="mb-4">
                    <p class="text-gray-700 mb-2 font-medium">Escolha a dificuldade:</p>
                    <div class="flex gap-3 justify-center flex-wrap">
                        <button onclick="setPieces(15)" id="btn15" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-semibold transition-colors">
                            15 pe√ßas (F√°cil)
                        </button>
                        <button onclick="setPieces(20)" id="btn20" class="bg-gray-400 hover:bg-gray-500 text-white px-6 py-2 rounded-lg font-semibold transition-colors">
                            20 pe√ßas (M√©dio)
                        </button>
                        <button onclick="setPieces(30)" id="btn30" class="bg-gray-400 hover:bg-gray-500 text-white px-6 py-2 rounded-lg font-semibold transition-colors">
                            30 pe√ßas (Dif√≠cil)
                        </button>
                        <button onclick="setPieces(50)" id="btn50" class="bg-gray-400 hover:bg-gray-500 text-white px-6 py-2 rounded-lg font-semibold transition-colors">
                            50 pe√ßas (Expert)
                        </button>
                    </div>
                </div>
                
                <button onclick="startPuzzle()" class="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-lg font-semibold text-lg transition-colors">
                    üéÆ Iniciar Quebra-Cabe√ßa
                </button>
            </div>

            <!-- Game Area -->
            <div id="gameArea" class="hidden">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    <!-- Reference Image -->
                    <div class="bg-white rounded-xl shadow-2xl p-6">
                        <h3 class="text-xl font-semibold text-gray-800 mb-4">üñºÔ∏è Imagem de Refer√™ncia</h3>
                        <div class="flex justify-center">
                            <img id="referenceImage" class="max-w-full h-auto rounded-lg shadow-lg" style="max-height: 300px;">
                        </div>
                        <div class="mt-4 text-center">
                            <p class="text-gray-600">Pe√ßas: <span id="totalPieces" class="font-bold">15</span></p>
                            <p class="text-gray-600">Corretas: <span id="correctPieces" class="font-bold text-green-600">0</span></p>
                        </div>
                    </div>

                    <!-- Puzzle Board -->
                    <div class="bg-white rounded-xl shadow-2xl p-6">
                        <h3 class="text-xl font-semibold text-gray-800 mb-4">üéØ Monte o Quebra-Cabe√ßa</h3>
                        <div id="puzzleBoard" class="grid gap-1 mx-auto" style="max-width: 400px; max-height: 400px;"></div>
                    </div>
                </div>

                <!-- Pieces Container -->
                <div class="bg-white rounded-xl shadow-2xl p-6 mt-8">
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">üß© Pe√ßas Dispon√≠veis</h3>
                    <div class="mb-4 p-3 bg-blue-50 rounded-lg md:hidden">
                        <p class="text-sm text-blue-800">
                            üì± <strong>No celular:</strong> Toque na pe√ßa para selecion√°-la (ficar√° dourada), depois toque no local correto para encaixar!
                        </p>
                    </div>
                    <div class="mb-4 p-3 bg-gray-50 rounded-lg hidden md:block">
                        <p class="text-sm text-gray-700">
                            üñ±Ô∏è <strong>No computador:</strong> Arraste as pe√ßas para os locais corretos no quebra-cabe√ßa!
                        </p>
                    </div>
                    <div id="piecesContainer" class="grid gap-2 justify-items-center"></div>
                </div>

                <!-- Success Message -->
                <div id="successMessage" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div class="bg-white rounded-xl p-8 text-center shadow-2xl">
                        <h2 class="text-3xl font-bold text-green-600 mb-4">üéâ Parab√©ns!</h2>
                        <p class="text-xl text-gray-700 mb-6">Voc√™ completou o quebra-cabe√ßa!</p>
                        <div class="flex gap-4 justify-center">
                            <button onclick="resetGame()" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold">
                                Jogar Novamente
                            </button>
                            <button onclick="goToWelcome()" class="bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg font-semibold">
                                Tela Inicial
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentImage = null;
        let pieceCount = 15;
        let puzzleData = [];
        let correctCount = 0;
        let selectedPiece = null;
        let isMobile = window.innerWidth <= 768;

        // Update mobile detection on resize
        window.addEventListener('resize', () => {
            isMobile = window.innerWidth <= 768;
        });

        function startGame() {
            document.getElementById('welcomeScreen').classList.add('hidden');
            document.getElementById('mainGame').classList.remove('hidden');
        }

        function goBack() {
            document.getElementById('gameArea').classList.add('hidden');
        }

        function goToWelcome() {
            document.getElementById('mainGame').classList.add('hidden');
            document.getElementById('welcomeScreen').classList.remove('hidden');
            resetGame();
        }

        function setPieces(count) {
            pieceCount = count;
            // Update button styles
            document.querySelectorAll('[id^="btn"]').forEach(btn => {
                btn.className = btn.className.replace('bg-blue-600', 'bg-gray-400').replace('bg-blue-700', 'bg-gray-500');
            });
            const selectedBtn = document.getElementById(`btn${count}`);
            selectedBtn.className = selectedBtn.className.replace('bg-gray-400', 'bg-blue-600').replace('bg-gray-500', 'bg-blue-700');
            document.getElementById('totalPieces').textContent = count;
        }

        document.getElementById('imageUpload').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    currentImage = e.target.result;
                };
                reader.readAsDataURL(file);
            }
        });

        function startPuzzle() {
            if (!currentImage) {
                alert('Por favor, selecione uma imagem primeiro!');
                return;
            }

            document.getElementById('gameArea').classList.remove('hidden');
            document.getElementById('referenceImage').src = currentImage;
            document.getElementById('correctPieces').textContent = '0';
            correctCount = 0;
            
            createPuzzle();
        }

        function createPuzzle() {
            const img = new Image();
            img.onload = function() {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                
                // Calculate grid dimensions
                const cols = Math.ceil(Math.sqrt(pieceCount * (img.width / img.height)));
                const rows = Math.ceil(pieceCount / cols);
                
                const pieceWidth = 400 / cols;
                const pieceHeight = 400 / rows;
                
                canvas.width = 400;
                canvas.height = 400;
                ctx.drawImage(img, 0, 0, 400, 400);
                
                // Create puzzle board
                const puzzleBoard = document.getElementById('puzzleBoard');
                puzzleBoard.innerHTML = '';
                puzzleBoard.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;
                puzzleBoard.style.gridTemplateRows = `repeat(${rows}, 1fr)`;
                
                // Create pieces container
                const piecesContainer = document.getElementById('piecesContainer');
                piecesContainer.innerHTML = '';
                
                puzzleData = [];
                
                for (let row = 0; row < rows; row++) {
                    for (let col = 0; col < cols; col++) {
                        if (puzzleData.length >= pieceCount) break;
                        
                        // Create drop zone
                        const dropZone = document.createElement('div');
                        dropZone.className = 'drop-zone bg-gray-100 rounded-lg aspect-square flex items-center justify-center text-gray-400 text-xs';
                        dropZone.dataset.position = `${row}-${col}`;
                        dropZone.textContent = puzzleData.length + 1;
                        
                        dropZone.addEventListener('dragover', handleDragOver);
                        dropZone.addEventListener('drop', handleDrop);
                        dropZone.addEventListener('dragleave', handleDragLeave);
                        dropZone.addEventListener('click', handleDropZoneClick);
                        
                        puzzleBoard.appendChild(dropZone);
                        
                        // Create puzzle piece
                        const pieceCanvas = document.createElement('canvas');
                        pieceCanvas.width = pieceWidth;
                        pieceCanvas.height = pieceHeight;
                        const pieceCtx = pieceCanvas.getContext('2d');
                        
                        pieceCtx.drawImage(
                            canvas,
                            col * pieceWidth, row * pieceHeight, pieceWidth, pieceHeight,
                            0, 0, pieceWidth, pieceHeight
                        );
                        
                        // Calculate piece size based on total pieces
                        let displayPieceSize;
                        if (pieceCount <= 15) {
                            displayPieceSize = 60;
                        } else if (pieceCount <= 20) {
                            displayPieceSize = 50;
                        } else if (pieceCount <= 30) {
                            displayPieceSize = 40;
                        } else {
                            displayPieceSize = 35;
                        }
                        
                        const piece = document.createElement('div');
                        piece.className = 'puzzle-piece bg-white rounded-lg shadow-lg border-2 border-gray-200 cursor-grab';
                        piece.style.width = `${displayPieceSize}px`;
                        piece.style.height = `${displayPieceSize}px`;
                        piece.style.backgroundImage = `url(${pieceCanvas.toDataURL()})`;
                        piece.style.backgroundSize = 'cover';
                        piece.draggable = true;
                        piece.dataset.correctPosition = `${row}-${col}`;
                        piece.dataset.pieceId = puzzleData.length;
                        
                        piece.addEventListener('dragstart', handleDragStart);
                        piece.addEventListener('dragend', handleDragEnd);
                        piece.addEventListener('click', handlePieceClick);
                        
                        piecesContainer.appendChild(piece);
                        
                        puzzleData.push({
                            element: piece,
                            correctPosition: `${row}-${col}`,
                            placed: false
                        });
                    }
                }
                
                // Set grid columns based on piece count
                let gridCols;
                if (pieceCount <= 15) {
                    gridCols = 'grid-cols-5 sm:grid-cols-8 md:grid-cols-10';
                } else if (pieceCount <= 20) {
                    gridCols = 'grid-cols-6 sm:grid-cols-10 md:grid-cols-12';
                } else if (pieceCount <= 30) {
                    gridCols = 'grid-cols-8 sm:grid-cols-12 md:grid-cols-15';
                } else {
                    gridCols = 'grid-cols-10 sm:grid-cols-15 md:grid-cols-20';
                }
                
                piecesContainer.className = `grid gap-2 justify-items-center ${gridCols}`;
                
                // Shuffle pieces
                shuffleArray(Array.from(piecesContainer.children));
            };
            img.src = currentImage;
        }

        function shuffleArray(array) {
            const container = document.getElementById('piecesContainer');
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                container.appendChild(array[j]);
            }
        }

        function handlePieceClick(e) {
            e.preventDefault();
            e.stopPropagation();
            
            if (isMobile) {
                // Remove selection from all pieces
                document.querySelectorAll('.puzzle-piece').forEach(piece => {
                    piece.classList.remove('selected');
                });
                
                // Remove highlight from all drop zones
                document.querySelectorAll('.drop-zone').forEach(zone => {
                    zone.classList.remove('highlight');
                });
                
                // Select this piece
                e.target.classList.add('selected');
                selectedPiece = e.target;
                
                // Highlight the correct drop zone
                const correctPosition = e.target.dataset.correctPosition;
                const correctZone = document.querySelector(`[data-position="${correctPosition}"]`);
                if (correctZone && !correctZone.hasChildNodes()) {
                    correctZone.classList.add('highlight');
                }
            }
        }

        function handleDropZoneClick(e) {
            e.preventDefault();
            e.stopPropagation();
            
            if (isMobile && selectedPiece) {
                const draggedPosition = selectedPiece.dataset.correctPosition;
                const dropPosition = e.currentTarget.dataset.position;
                
                if (draggedPosition === dropPosition) {
                    // Correct position
                    e.currentTarget.innerHTML = '';
                    e.currentTarget.appendChild(selectedPiece.cloneNode(true));
                    e.currentTarget.classList.add('correct-position');
                    e.currentTarget.classList.remove('highlight');
                    
                    // Remove from pieces container
                    selectedPiece.remove();
                    selectedPiece = null;
                    
                    correctCount++;
                    document.getElementById('correctPieces').textContent = correctCount;
                    
                    // Check if puzzle is complete
                    if (correctCount === pieceCount) {
                        setTimeout(() => {
                            document.getElementById('successMessage').classList.remove('hidden');
                        }, 500);
                    }
                } else {
                    // Wrong position
                    e.currentTarget.style.backgroundColor = '#fee2e2';
                    setTimeout(() => {
                        e.currentTarget.style.backgroundColor = '';
                    }, 1000);
                    
                    // Deselect piece
                    selectedPiece.classList.remove('selected');
                    selectedPiece = null;
                    
                    // Remove highlights
                    document.querySelectorAll('.drop-zone').forEach(zone => {
                        zone.classList.remove('highlight');
                    });
                }
            }
        }

        function handleDragStart(e) {
            if (!isMobile) {
                e.dataTransfer.setData('text/plain', e.target.dataset.correctPosition);
                e.target.classList.add('dragging');
            }
        }

        function handleDragEnd(e) {
            if (!isMobile) {
                e.target.classList.remove('dragging');
            }
        }

        function handleDragOver(e) {
            if (!isMobile) {
                e.preventDefault();
                e.currentTarget.classList.add('drag-over');
            }
        }

        function handleDragLeave(e) {
            if (!isMobile) {
                e.currentTarget.classList.remove('drag-over');
            }
        }

        function handleDrop(e) {
            if (!isMobile) {
                e.preventDefault();
                e.currentTarget.classList.remove('drag-over');
                
                const draggedPosition = e.dataTransfer.getData('text/plain');
                const dropPosition = e.currentTarget.dataset.position;
                
                if (draggedPosition === dropPosition) {
                    // Correct position
                    const piece = document.querySelector(`[data-correct-position="${draggedPosition}"]`);
                    e.currentTarget.innerHTML = '';
                    e.currentTarget.appendChild(piece.cloneNode(true));
                    e.currentTarget.classList.add('correct-position');
                    
                    // Remove from pieces container
                    piece.remove();
                    
                    correctCount++;
                    document.getElementById('correctPieces').textContent = correctCount;
                    
                    // Check if puzzle is complete
                    if (correctCount === pieceCount) {
                        setTimeout(() => {
                            document.getElementById('successMessage').classList.remove('hidden');
                        }, 500);
                    }
                } else {
                    // Wrong position - piece returns to container
                    e.currentTarget.style.backgroundColor = '#fee2e2';
                    setTimeout(() => {
                        e.currentTarget.style.backgroundColor = '';
                    }, 1000);
                }
            }
        }

        function resetGame() {
            document.getElementById('successMessage').classList.add('hidden');
            document.getElementById('gameArea').classList.add('hidden');
            document.getElementById('imageUpload').value = '';
            currentImage = null;
            correctCount = 0;
            selectedPiece = null;
            
            // Clear all selections and highlights
            document.querySelectorAll('.puzzle-piece').forEach(piece => {
                piece.classList.remove('selected');
            });
            document.querySelectorAll('.drop-zone').forEach(zone => {
                zone.classList.remove('highlight');
            });
            
            setPieces(15);
        }

        // Initialize with 15 pieces selected
        setPieces(15);
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'962f76f2a52101a3',t:'MTc1MzE1MDg4Ni4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script>
<button class="bg-gray-400 hover:bg-gray-500 text-white px-6 py-2 rounded-lg font-semibold transition-colors">
<a href="https://vaps41.github.io/Quebra-Cabe-a/">Vers√£o 1</a>                        
</button>
  </body>
</html>
